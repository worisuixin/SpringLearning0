<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">


<!--    配置SqlSessionFactoryBean，用于将SqlSessionFactory存储到Spring容器-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidMysql"></property>
    </bean>
<!--    配置MapperScannerConfigurer,  用于扫描指定的包，产生Mapper对象存储到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itbaima.mapper"></property>
    </bean>
<!--上面这两个配置，直接就将mybatis中的配置给囊括了，所以就不要那个文件了  当然，还得写配置中夹着的配置
此后，使用这个mapper对象，就是直接放到bean里面，然后bean配置文件写上就可以使用了-->



    <bean id="userService" name="service,service2" class="com.itbaima.service.impl.UserServiceImpl" init-method="init" destroy-method="destroy">
        <property name="userDao" ref="userDao"></property>    <!--DI,依赖注入-->
<!--        这里这个name就是userService里面set之后的名字，这个ref就是下面使用的那个类的id，两个意思不一样-->
<!--   DI依赖注入基本操作   同时，这里就是去注入一个类，不用去手动创建，而是在这个依赖文件里面去注入，将这个userDao对象直接注入到这个类里面-->
<!--        同理这里后面的init和destory-method就是对初始化和销毁之后方法的设置-->
    </bean>
<!--    这个class就是导入这个类的全限定名字，这个id就是唯一标识，用来使用这个类, 且这个id要唯一-->
<!--    这里这个id是作为唯一标识，但当传入到getbean时，其实这个是会转换为beanname的-->
<!--    这里这个name就是别名，之后的get就可以通过这个进行获取bean，且可以多个别名。但到最后其实找的还是这个id，这里有点语法糖的感觉-->
    <bean id="userDao" class="com.itbaima.dao.impl.UserDaoImpl" lazy-init="true"></bean>
<!--    这里设置为延迟加载之后，就不会在创建Spring容器时，立即创建Bean实例，等到用时才会去-->

    <bean id="druidMysql" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
<!--    上面这个就是对非自定义的bean的使用。首先就是在pom文件中进行配置，导入需要使用的类。然后在bean文件中进行配置
很像自定义的，只是说这个全限定名不一样。下面的property就是具体属性的配置-->


<!--    这是个静态工厂方法，且其实启动的时候spring会自动实例化所有的bean(如无特殊，所以启动之后这个就已经实例化完了-->
     <bean id="connectionDriver" class="java.lang.Class" factory-method="forName">
         <constructor-arg name="className" value="com.mysql.jdbc.Driver"></constructor-arg>
     </bean>
     <bean id="connection"  class="java.sql.DriverManager" factory-method="getConnection">
        <constructor-arg name="url" value="jdbc:mysql://localhost:3306/mybatis"></constructor-arg>
         <constructor-arg name="user" value="root"></constructor-arg>
         <constructor-arg name="password" value="123456"></constructor-arg>
     </bean>
<!-- 这个就是对Connection和驱动Driver的注入，这里他是个有参构造，所以需要指定构造方法的名字以及参数值。还有对应的全限定名-->


<!--    静态工厂方法方式配置  写上具体的静态方法，以及与之对应的参数值-->
     <bean id="in" class="org.apache.ibatis.io.Resources" factory-method="getResourceAsStream">
         <constructor-arg name="resource" value="mybatis-config.xml"></constructor-arg>
     </bean>
<!--    无参构造实例化，没有参数，所以直接啥也不用写-->
     <bean id="builder" class="org.apache.ibatis.session.SqlSessionFactoryBuilder"></bean>
<!--    实例工厂方法  实例工厂就是说他会去调用某一个工厂的构造方法去生成对象，所以得先由工厂，即先由一个bean，然后去调用-->
    <bean id="sqlSessionFactory" factory-bean="builder" factory-method="build">
        <constructor-arg name="inputStream" ref="in"></constructor-arg>
    </bean>


<!--演示后处理器的使用-->
    <bean class="com.itbaima.processor.MyBeanFactoryPostProcessor"></bean>
    <bean class="com.itbaima.processor.MyBeanDefinitionRegesterPostProcessor"></bean>


<!--    演示自定义注解扫描的使用，所有都有了，还是得把注册的那个类放到这里面-->
    <bean class="com.itbaima.processor.MyComponentBeanFactoryPostPocessor"></bean>


<!--    用来演示BeanPostProcessor，用到了动态代理，所有的bean都会进入到里面进行增强-->
    <bean class="com.itbaima.processor.TimeLogBeanPostProcessor"></bean>


    <bean id="myBeanFactory1" class="com.itbaima.factory.MyBeanFactory1"></bean>
    <bean id="myBeanUserDao" factory-bean="myBeanFactory1" factory-method="getUserDao"></bean>
<!--上面这两行就是使用实例工厂方法去实例化bean。既然是实例工厂，所以得先有实例工厂，即第一行用来配置实例工厂，第二行用来使用实例工厂的方法来实例化对象-->
</beans>